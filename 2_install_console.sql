--DO NOT CHANGE THIS FILE - IT IS GENERATED WITH THE BUILD SCRIPT src/build.js
set define off feedback off
whenever sqlerror exit sql.sqlcode rollback

prompt
prompt Installing Oracle Instrumentation Console
prompt ==================================================

prompt Set compiler flags
DECLARE
  v_apex_installed VARCHAR2(5) := 'FALSE'; -- Do not change (is set dynamically).
  v_utils_public   VARCHAR2(5) := 'FALSE'; -- Make utilities public available (for testing or other usages).
BEGIN
  FOR i IN (SELECT 1
              FROM all_objects
             WHERE object_type = 'SYNONYM'
               AND object_name = 'APEX_EXPORT')
  LOOP
    v_apex_installed := 'TRUE';
  END LOOP;

  -- Show unset compiler flags as errors (results for example in errors like "PLW-06003: unknown inquiry directive '$$UTILS_PUBLIC'")
  EXECUTE IMMEDIATE 'alter session set plsql_warnings = ''ENABLE:6003''';
  -- Finally set compiler flags
  EXECUTE IMMEDIATE 'alter session set plsql_ccflags = '''
    || 'apex_installed:' || v_apex_installed || ','
    || 'utils_public:'   || v_utils_public   || '''';
END;
/

prompt Create or alter table console_logs
--For development only - uncomment temporarely when you need it:
begin for i in (select 1 from user_tables where table_name = 'CONSOLE_LOGS') loop execute immediate 'drop table console_logs purge'; end loop; end;
/

declare
  v_name varchar2(30 char) := 'CONSOLE_LOGS';
begin
  for i in (
    select v_name from dual
    minus
    select table_name from user_tables where table_name = v_name
  )
  loop
    execute immediate q'{
      create table console_logs (
        id         integer                         generated by default on null as identity,
        log_time   timestamp with local time zone  default systimestamp  not null,
        log_level  integer,
        message    clob,
        --
        constraint console_logs_check_level check (log_level in (0,1,2,3))
      )
    }';
  end loop;
end;
/

prompt Compile package console (spec)
create or replace package console authid current_user is
c_name        constant varchar2(30 char) := 'Oracle Instrumentation Console';
c_version     constant varchar2(10 char) := '0.1.0';
c_url         constant varchar2(60 char) := 'https://github.com/ogobrecht/oracle-instrumentation-console';
c_license     constant varchar2(10 char) := 'MIT';
c_license_url constant varchar2(80 char) := 'https://github.com/ogobrecht/oracle-instrumentation-console/blob/main/LICENSE';
c_author      constant varchar2(20 char) := 'Ottmar Gobrecht';
/**
Oracle Instrumentation Console
==============================

An instrumentation tool for Oracle developers. Save to install on production and mostly API compatible with the JavaScript console.

DEPENDENCIES

Oracle DB >= 18.x???

INSTALLATION

- Download the [latest version](https://github.com/ogobrecht/oracle-instrumentation-console/releases/latest) and unzip it or clone the repository
- Go into the project root directory and use SQL*Plus (or another tool which can run SQL scripts)

The installation itself is splitted into two mandatory and two optional steps:

1. Create a context with a privileged user
    - `1_install_context.sql`
    - Copy into `1_install_context_local.sql` and align it to your needs (doing it this way you are upgrade save with your alignments)
    - Maybe your DBA needs to do that for you once
2. Install the tool itself in your desired target schema
    - `2_install_console.sql`
    - User needs the rights to create a package, a table and views
    - Do this step on every new release of the tool
3. Optional: When installed in a central tools schema you may want to grant execute rights on the package and select rights on the views to public or other schemas
    - `3_grant_rights.sql`
    - Copy into `3_grant_rights_local.sql` and align it to your needs (doing it this way you are upgrade save with your alignments)
4. Optional: When you want to use it in another schema you may want to create synonyms there for easier access
    - `4_create_synonyms.sql`
    - Copy into `4_create_synonyms_local.sql` and align it to your needs (doing it this way you are upgrade save with your alignments)

UNINSTALLATION

Hopefully you will never need this...

FIXME: Create uninstall scripts

**/


------------------------------------------------------------------------------------------------------------------------
-- CONSTANTS, TYPES
------------------------------------------------------------------------------------------------------------------------
c_level_permanent constant integer := 0;
c_level_error     constant integer := 1;
c_level_warn      constant integer := 2;
c_level_debug     constant integer := 3;

------------------------------------------------------------------------------------------------------------------------
-- MAIN METHODS
------------------------------------------------------------------------------------------------------------------------
procedure permanent (
  p_message clob
);
/** Log a message with the level 0 (permanent). These messages will not be deleted on cleanup. **/

procedure error (
  p_message clob
);
/** Log a message with the level 1 (error). **/

procedure warn (
  p_message clob
);
/** Log a message with the level 2 (warn). **/

procedure debug (
  p_message clob
);
/** Log a message with the level 3 (debug). **/


procedure log(
  p_message clob
);
/** Log a message with the level 3 (debug). This is an alias for the debug method. **/

------------------------------------------------------------------------------------------------------------------------
-- UTILITIES (only compiled when public)
------------------------------------------------------------------------------------------------------------------------

$if $$utils_public $then



$end

end console;
/

show errors

prompt Compile package console (body)
create or replace package body console is

------------------------------------------------------------------------------------------------------------------------
-- CONSTANTS, TYPES, GLOBALS
------------------------------------------------------------------------------------------------------------------------

c_tab          constant varchar2(1) := chr(9);
c_cr           constant varchar2(1) := chr(13);
c_lf           constant varchar2(1) := chr(10);
c_crlf         constant varchar2(2) := chr(13) || chr(10);
c_at           constant varchar2(1) := '@';
c_hash         constant varchar2(1) := '#';
c_slash        constant varchar2(1) := '/';
c_vc2_max_size constant pls_integer := 32767;

------------------------------------------------------------------------------------------------------------------------
-- UTILITIES (forward declarations, only compiled when not public)
------------------------------------------------------------------------------------------------------------------------

$if not $$utils_public $then



$end


------------------------------------------------------------------------------------------------------------------------
-- UTILITIES
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
-- MAIN CODE
------------------------------------------------------------------------------------------------------------------------

procedure log_internal (p_level integer, p_message clob) is
  pragma autonomous_transaction;
begin
  dbms_output.put_line(p_message);
  insert into console_logs (log_level, message) values (p_level, p_message);
  commit;
end;

procedure permanent (p_message clob) is
begin
  log_internal (c_level_permanent, p_message);
end;

procedure error (p_message clob) is
begin
  log_internal (c_level_error, p_message);
end;

procedure warn (p_message clob) is
begin
  log_internal (c_level_warn, p_message);
end;

procedure debug (p_message clob) is
begin
  log_internal (c_level_debug, p_message);
end;

procedure log (p_message clob) is
begin
  log_internal (c_level_debug, p_message);
end;

end console;
/

show errors

prompt ==================================================
prompt Installation Done
prompt
